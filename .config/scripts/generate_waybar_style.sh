#!/bin/bash

# Path to colors.json generated by Pywal
# Using ${XDG_CACHE_HOME:-$HOME/.cache} is slightly more robust
CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}"
COLOR_FILE="$CACHE_DIR/wal/colors.json"

# --- Sanity Checks ---

# 1. Check if jq is installed
if ! command -v jq &> /dev/null; then
    echo "Error: jq is not installed. Please install it to parse JSON." >&2
    exit 1
fi

# 2. Check if colors.json exists
if [ ! -f "$COLOR_FILE" ]; then
    echo "Error: colors.json not found at $COLOR_FILE" >&2
    echo "Ensure Pywal has run successfully." >&2
    exit 1
fi

# --- Extract Colors ---
# Access colors within the "colors" object using .colors.colorX
# Use || echo "fallback_color" to provide a default if a key is missing,
# or add checks after extraction. Using black/white as simple fallbacks here.
color0=$(jq -r '.colors.color0 // "#000000"' "$COLOR_FILE")
color1=$(jq -r '.colors.color1 // "#FF0000"' "$COLOR_FILE") # Red fallback
color2=$(jq -r '.colors.color2 // "#00FF00"' "$COLOR_FILE") # Green fallback
color3=$(jq -r '.colors.color3 // "#FFFF00"' "$COLOR_FILE") # Yellow fallback
color4=$(jq -r '.colors.color4 // "#0000FF"' "$COLOR_FILE") # Blue fallback
color5=$(jq -r '.colors.color5 // "#FF00FF"' "$COLOR_FILE") # Magenta fallback
color6=$(jq -r '.colors.color6 // "#00FFFF"' "$COLOR_FILE") # Cyan fallback
color7=$(jq -r '.colors.color7 // "#FFFFFF"' "$COLOR_FILE") # White fallback

# --- Debugging ---
# Optional: Uncomment to verify extracted colors before writing the CSS
# echo "Extracted colors:"
# echo "color0: $color0"
# echo "color1: $color1"
# echo "color2: $color2"
# echo "color3: $color3"
# echo "color4: $color4"
# echo "color5: $color5"
# echo "color6: $color6"
# echo "color7: $color7"

# --- Check for Extraction Errors ---
# A simple check: if color0 is still the fallback or empty/null, something went wrong.
if [[ -z "$color0" || "$color0" == "null" || "$color0" == "#000000" ]]; then
     # Check if color0 was actually black in the file
     actual_color0=$(jq -r '.colors.color0' "$COLOR_FILE")
     if [[ "$actual_color0" != "#000000" && "$actual_color0" != *"000000"* ]]; then # Allow for #000 variants
        echo "Warning: Failed to extract colors correctly from $COLOR_FILE." >&2
        echo "Please check the file structure and jq paths (e.g., .colors.color0)." >&2
        # Decide whether to exit or proceed with potentially wrong colors
        # exit 1 # Uncomment to exit if colors are likely wrong
     fi
fi


# --- Create Waybar CSS ---
# Ensure the target directory exists
WAYBAR_CONFIG_DIR="$HOME/.config/waybar"
TEMPLATE_FILE="$WAYBAR_CONFIG_DIR/style.template.css"
OUTPUT_FILE="$WAYBAR_CONFIG_DIR/style.css"

if [ ! -f "$TEMPLATE_FILE" ]; then
    echo "Error: Template file not found at $TEMPLATE_FILE" >&2
    exit 1
fi

# Use sed to replace placeholders in the template file
sed -e "s|__COLOR0__|${color0}|g" \
    -e "s|__COLOR1__|${color1}|g" \
    -e "s|__COLOR2__|${color2}|g" \
    -e "s|__COLOR3__|${color3}|g" \
    -e "s|__COLOR4__|${color4}|g" \
    -e "s|__COLOR5__|${color5}|g" \
    -e "s|__COLOR6__|${color6}|g" \
    -e "s|__COLOR7__|${color7}|g" \
    "$TEMPLATE_FILE" > "$OUTPUT_FILE" # Note: Overwrites the output file

echo "Waybar style.css generated from template at $OUTPUT_FILE"
echo "Reload Waybar for changes to take effect (e.g., killall -SIGUSR2 waybar)"

